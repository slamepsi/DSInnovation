// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Gtk;

namespace DSInnovation
{
	public class Interface : Window
	{
		ListStore store;
		Statusbar statusbar;

		enum Column
		{
			Nom,
			Prenom,
			Points
		}

		personne[] test =
		{
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30),
			new personne("Lepretre", "Alexandre, Estelle, Véronique", 10),
			new personne("Buirette", "Quentin, Leaiticia, osef", 20),
			new personne("Argenson", "guillaume, chatte en chaleur", 30)
		};

		public Interface () : base("PointHair")
		{


			/*
			 * 	Taille de la feêtre et position centré par défaut sur l'écran
			 */ 
			SetDefaultSize(960, 800);
			SetPosition(WindowPosition.Center);
			DeleteEvent+= delegate {
				Application.Quit ();
			};

			HBox hbox = new HBox(false, 8);

			// Interface de gauche
			VBox vbox = new VBox(false, 8);
			hbox.PackStart(vbox, true, true, 0);

			ScrolledWindow sw = new ScrolledWindow();
			sw.ShadowType = ShadowType.EtchedIn;
			sw.SetPolicy( PolicyType.Automatic, PolicyType.Automatic );
			vbox.PackStart( sw, true, true, 0 );

			store = CreateModel();

			TreeView tree = new TreeView(store);
			tree.RulesHint = true;
			tree.RowActivated += OnRowActivated;
			sw.Add ( tree );

			AddColumns(tree);

			statusbar = new Statusbar();

			vbox.PackStart(statusbar, false, false, 0 );

			Add (hbox);


			/*
			 * 	Il s'agit d'une méthode qui affiche tous les éléments du code
			 */
			ShowAll();
		}

		void OnDelete(object obj, DeleteEventArgs args)
		{
			Application.Quit();
		}

		void OnFileExited (object obj, EventArgs args) {
			Application.Quit();
		}

		void AddColumns(TreeView tree) {
			CellRendererText rendertext = new CellRendererText();
			TreeViewColumn column = new TreeViewColumn("Nom", rendertext, "text", Column.Nom);
			column.SortColumnId = (int) Column.Nom;
			tree.AppendColumn(column);

			rendertext = new CellRendererText();
			column = new TreeViewColumn("Membre", rendertext, "text", Column.Prenom);
			column.SortColumnId = (int) Column.Prenom;
			tree.AppendColumn(column);

			rendertext = new CellRendererText();
			column = new TreeViewColumn("Points", rendertext, "text", Column.Points );
			column.SortColumnId = (int) Column.Points;
			tree.AppendColumn(column);

		}

		void OnRowActivated(object sender, RowActivatedArgs args) {
			TreeIter iter;
			TreeView view = (TreeView) sender;

			if(view.Model.GetIter(out iter, args.Path )) {
				string row = (string) view.Model.GetValue(iter, (int) Column.Nom);
				row += " " + (string) view.Model.GetValue( iter, (int) Column.Prenom);
				row += " : " + view.Model.GetValue (iter, (int) Column.Points);
				statusbar.Push(0, row);
			}
		}

		ListStore CreateModel() {
			ListStore store = new ListStore( typeof(string), typeof(string), typeof(int));

			foreach( personne people in test ) {
				store.AppendValues(people.nom, people.prenom, people.points);
			}

			return store;
		}
	}
}

