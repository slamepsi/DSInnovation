// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Gtk;
using System.Collections.Generic;
using System.Threading;

namespace DSInnovation
{

	public class Interface : Window
	{
		private static ListStore store;
		private static string nomLook;
		private static TreeView tree;
		private Label familleMembreLabel;
		private Fixed modifierMembreFixed;
		private static int familleChoisi = -1;
		private Label messageModifierMembre;
		private static TreeView treeMember;
		private static ListStore storeMember;
		private Entry nomModifierMembreEntry;
		private Entry adresseModifierMembreEntry;
		private Label pointModifierLabel;
		private int choixMenu = 0;

		private VBox vbox;

		enum Column
		{
			Id,
			Nom,
			Prenom,
			Points
		}

		public static List<Famille> familleListe = new List<Famille>();


		private static string[] nomFamilleListe;


		private void initialisationFamilleListe() {
			nomFamilleListe = new string[familleListe.Count];
			for (int i = 0; i < nomFamilleListe.Length; i++ ) {
				nomFamilleListe[i] = familleListe[i].Nom;
			}
		}


		public Interface () : base("PointHair")
		{
			initialisationFamilleListe();

			nomLook = "";

			/*
			 * 	Taille de la feêtre et position centré par défaut sur l'écran
			 */ 
			SetDefaultSize(960, 800);
			SetPosition(WindowPosition.Center);
			DeleteEvent+= delegate {
				MainClass.GetSocket.disconnect();
				Application.Quit ();
			};



			HBox hbox = new HBox(false, 8);

			//////////////////////////////////////////////////
			////////////// Interface de gauche ///////////////
			//////////////////////////////////////////////////
			vbox = new VBox(false, 8);
			hbox.PackStart(vbox, true, true, 0);

			vbox.SetSizeRequest(250, 800);

			ScrolledWindow sw = new ScrolledWindow();
			sw.ShadowType = ShadowType.EtchedIn;
			sw.SetPolicy( PolicyType.Automatic, PolicyType.Automatic );
			vbox.PackStart( sw, true, true, 0 );

			store = CreateModel();

			tree = new TreeView(store);
			tree.RulesHint = true;
			tree.RowActivated += OnRowActivated;
			sw.Add ( tree );

			AddColumns(tree);





			//////////////////////////////////////////////////
			////////////// Interface de droite ///////////////
			//////////////////////////////////////////////////




			//////////////////////////////////////////////////////
			////////////// Interface ajout Famille ///////////////
			//////////////////////////////////////////////////////
			Fixed ajoutFamilleFixed = new Fixed();
			ajoutFamilleFixed.SetSizeRequest( 710, 675);

			Label nomFamilleLabel = new Label("Nom :");
			Entry nomFamilleEntry = new Entry();
			nomFamilleEntry.SetSizeRequest ( 200, 25 );

			Label adresseFamilleLabel = new Label("Adresse :");
			Entry adresseFamilleEntry = new Entry();
			adresseFamilleEntry.SetSizeRequest(400, 25);

			Button createFamille = new Button("Créer la famille");
			createFamille.SetSizeRequest( 200, 50 );
			createFamille.Clicked += delegate {
				if( nomFamilleEntry.Text.Length > 2 ) {
					if( nomFamilleEntry.Text.Length > 15) {
						nomFamilleEntry.Text = nomFamilleEntry.Text.Substring(0, 15);
					}
					MainClass.GetSocket.sendMessage("addFamily:" + nomFamilleEntry.Text + ":" + adresseFamilleEntry.Text );
					nomFamilleEntry.Text = "";
					adresseFamilleEntry.Text = "";
					familleChoisi = -1;
				}
			};


			ajoutFamilleFixed.Put ( nomFamilleLabel, 50, 50 );
			ajoutFamilleFixed.Put ( nomFamilleEntry, 90, 45 );
			ajoutFamilleFixed.Put ( adresseFamilleLabel, 50, 100 );
			ajoutFamilleFixed.Put ( adresseFamilleEntry, 110, 95 );
			ajoutFamilleFixed.Put ( createFamille, 250, 150 );




			//////////////////////////////////////////////////////
			////////////// Interface ajout Membre ////////////////
			//////////////////////////////////////////////////////

			Fixed ajoutMembreFixed = new Fixed();
			ajoutMembreFixed.SetSizeRequest( 710, 625 );

			Label prenomMembreLabel = new Label("Prénom :");
			Entry prenomMembreEntry = new Entry();
			prenomMembreEntry.SetSizeRequest( 200, 25 );

			Label genreMembreLabel = new Label("Genre :");
			ComboBox genreMembreComboBox = new ComboBox(new String[] {"Homme", "Femme"});

			familleMembreLabel = new Label("Famille : <choisissez votre famille dans la liste de gauche>");
			//ComboBox familleMembreComboBox = new ComboBox(nomFamilleListe);

			Button createMembre = new Button("Créer le membre");
			createMembre.Clicked += delegate {
				try {
					if(genreMembreComboBox.Active != -1 && prenomMembreEntry.Text.Length > 3 && familleChoisi != -1 ) {
						//familleListe[familleChoisi].AddMembre(prenomMembreEntry.Text, genreMembreComboBox.Active );

						MainClass.GetSocket.sendMessage("addMember:"+ familleListe[familleChoisi].Dbid + ":" + prenomMembreEntry.Text + ":" + genreMembreComboBox.Active);
						prenomMembreEntry.Text = "";
						genreMembreComboBox.Active = -1;
						familleChoisi = -1;
						familleMembreLabel.Text = "Famille : <choisissez votre famille dans la liste de gauche>";
					}
				} catch {
					modifierMembreFixed.HideAll();
					ajoutFamilleFixed.ShowAll();
					ajoutMembreFixed.HideAll();
				}
			};
			createMembre.SetSizeRequest( 200, 50 );

			ajoutMembreFixed.Put ( prenomMembreLabel, 50, 50 );
			ajoutMembreFixed.Put ( prenomMembreEntry, 110, 45 );
			ajoutMembreFixed.Put ( genreMembreLabel, 50, 100 );
			ajoutMembreFixed.Put ( genreMembreComboBox, 105, 92 );
			ajoutMembreFixed.Put ( familleMembreLabel, 50, 150 );
			ajoutMembreFixed.Put ( createMembre, 250, 200 );



			//////////////////////////////////////////////////////
			/////// Interface Modifier Membre /Famille ///////////
			//////////////////////////////////////////////////////

			modifierMembreFixed = new Fixed();
			modifierMembreFixed.SetSizeRequest( 710, 625 );

			messageModifierMembre = new Label("Veuillez choisir une famille à modifier dans la liste de gauche.");

			Button addPoint = new Button("Ajouter des points");
			addPoint.Clicked += delegate {
				AddPoint test = new AddPoint(familleListe[familleChoisi].Dbid, familleListe[familleChoisi].Nom);
				test.KeepAbove = true;
			};

			Button delPoint = new Button("Enlever des points");
			delPoint.Clicked += delegate {
				addPoint.CanFocus = false;
				DelPoint test = new DelPoint(familleListe[familleChoisi].Dbid, familleListe[familleChoisi].Nom);
				test.KeepAbove = true;
			};

			Label nomModifierMembreLabel = new Label("Nom : ");
			nomModifierMembreEntry = new Entry();
			nomModifierMembreEntry.SetSizeRequest( 150, 25 );

			Label adresseModifierMembreLabel = new Label("Adresse : ");
			adresseModifierMembreEntry = new Entry();
			adresseModifierMembreEntry.SetSizeRequest( 500, 25 );

			pointModifierLabel = new Label("Points : ");

			storeMember = CreateModelMember();
			treeMember = new TreeView(storeMember);
			treeMember.RulesHint = true;
			treeMember.RowActivated += delegate {
				
			};
			AddColumnsMember(treeMember);
			treeMember.SetSizeRequest( 200, 300 );


			Button supprimerFamilleButton = new Button("Supprimer la famille");
			supprimerFamilleButton.Clicked += delegate {
				MainClass.GetSocket.sendMessage("delFamily:" + familleListe[familleChoisi].Dbid);
				modifierMembreFixed.HideAll();
				messageModifierMembre.Text = "Veuillez choisir dans la liste de gauche la famille à modifier.";
				modifierMembreFixed.Show();
				messageModifierMembre.Show();
			};
			Button modifierFamilleButton = new Button("Modifier la famille");
			modifierFamilleButton.Clicked += delegate {
				try {
					MainClass.GetSocket.sendMessage("updFamily:"+familleListe[familleChoisi].Dbid + ":" + nomModifierMembreEntry.Text + 
				                          	      ":" + adresseModifierMembreEntry.Text );
				} catch {
					modifierMembreFixed.HideAll();
					messageModifierMembre.Text = "La famille Choisie n'existe plus.\n\nVeuillez choisir dans la liste de gauche la famille à modifier.";
					modifierMembreFixed.Show();
					messageModifierMembre.Show();
				}
			};


			modifierMembreFixed.Put ( messageModifierMembre, 50, 50 );
			modifierMembreFixed.Put ( addPoint, 75, 0 );
			modifierMembreFixed.Put ( delPoint, 375, 0 );
			modifierMembreFixed.Put ( nomModifierMembreLabel, 70, 50 );
			modifierMembreFixed.Put ( nomModifierMembreEntry, 110, 45 );
			modifierMembreFixed.Put ( adresseModifierMembreLabel, 50, 75 );
			modifierMembreFixed.Put ( adresseModifierMembreEntry, 110, 70 );
			modifierMembreFixed.Put ( pointModifierLabel, 60, 100 );
			modifierMembreFixed.Put ( treeMember, 240, 150 );
			modifierMembreFixed.Put ( supprimerFamilleButton, 50, 615 );
			modifierMembreFixed.Put ( modifierFamilleButton, 550, 615 );



			//////////////////////////////////////////////////////
			///////////////// Interface Général //////////////////
			//////////////////////////////////////////////////////

			Fixed fix = new Fixed();
			fix.SetSizeRequest(710, 800);
			Label recherche = new Label("Rechercher par nom : ");
			Entry entryNom = new Entry();
			entryNom.Changed += loadClient;
			entryNom.SetSizeRequest(200, 25);


			Button ajouterFamille = new Button("Ajouter une famille");
			ajouterFamille.SetSizeRequest( 200, 35 );
			ajouterFamille.Clicked += delegate {
				choixMenu = 1;
				modifierMembreFixed.HideAll();
				ajoutFamilleFixed.ShowAll();
				ajoutMembreFixed.HideAll();
			};

			Button ajouterMembre = new Button("Ajouter un membre");
			ajouterMembre.SetSizeRequest( 200, 35 );
			ajouterMembre.Clicked += delegate {
				choixMenu = 2;
				modifierMembreFixed.HideAll();
				ajoutFamilleFixed.HideAll();
				ajoutMembreFixed.ShowAll();
			};

			Button modifierFamille = new Button( "Modifier une famille / un client");
			modifierFamille.SetSizeRequest( 200, 35 );
			modifierFamille.Clicked += delegate {
				choixMenu = 3;
				if( familleChoisi == - 1 ) {
					messageModifierMembre.Text = "Veuillez choisir dans la liste de gauche la famille à modifier.";
					modifierMembreFixed.Show();
					messageModifierMembre.Show();
				} else {
					messageModifierMembre.Text = "";
					modifierMembreFixed.ShowAll();
				}

				ajoutFamilleFixed.HideAll();
				ajoutMembreFixed.HideAll();

			};




			Statusbar coupure = new Statusbar();
			coupure.SetSizeRequest( 700, 1);




			fix.Put ( recherche, 10, 15 );
			fix.Put ( entryNom, 140, 10 );
			fix.Put ( ajouterFamille, 25, 60 );
			fix.Put ( ajouterMembre, 250, 60 );
			fix.Put ( modifierFamille, 475, 60 );
			fix.Put ( coupure, 0, 110 );
			fix.Put ( ajoutFamilleFixed, 0, 125 );
			fix.Put ( ajoutMembreFixed, 0, 125 );
			fix.Put ( modifierMembreFixed, 0, 125 );
			hbox.Add ( fix );


			Add (hbox);
			ShowAll();
			ajoutFamilleFixed.HideAll ();
			ajoutMembreFixed.HideAll ();
			modifierMembreFixed.HideAll();
		}




		void AddColumns(TreeView tree) {
			CellRendererText rendertext = new CellRendererText();
			TreeViewColumn column = new TreeViewColumn("Nom", rendertext, "text", Column.Nom);
			column.SortColumnId = (int) Column.Nom;
			tree.AppendColumn(column);

			rendertext = new CellRendererText();
			column = new TreeViewColumn("Prénom", rendertext, "text", Column.Prenom);
			column.SortColumnId = (int) Column.Prenom;
			tree.AppendColumn(column);

			rendertext = new CellRendererText();
			column = new TreeViewColumn("Points", rendertext, "text", Column.Points );
			column.SortColumnId = (int) Column.Points;
			tree.AppendColumn(column);

		}

		void AddColumnsMember(TreeView tree) {
			CellRendererText renderText = new CellRendererText();
			TreeViewColumn column = new TreeViewColumn("Prénom", renderText, "text", 1);
			column.SortColumnId = 0;
			treeMember.AppendColumn(column);

			renderText = new CellRendererText();
			column = new TreeViewColumn("Genre", renderText, "text", 2);
			column.SortColumnId = 1;
			treeMember.AppendColumn(column);
		}


		///////////////////////////////////////////////////////////////////////
		/////////////// Activation lorsque double click sur liste /////////////
		///////////////////////////////////////////////////////////////////////
		void OnRowActivated(object sender, RowActivatedArgs args) {
			TreeIter iter;
			TreeView view = (TreeView) sender;

			if(view.Model.GetIter(out iter, args.Path )) {
				string row = (string) view.Model.GetValue(iter, (int) Column.Nom);
				familleMembreLabel.Text = "Famille : " + row;
				messageModifierMembre.Text = "";

				familleChoisi = (int) view.Model.GetValue(iter, (int) Column.Id);
				nomModifierMembreEntry.Text = familleListe[familleChoisi].Nom;
				adresseModifierMembreEntry.Text = familleListe[familleChoisi].Adresse;
				pointModifierLabel.Text = "Points : " + familleListe[familleChoisi].Points;
				storeMember = CreateModelMember();
				treeMember.Model = storeMember;

				if(choixMenu == 3)
					modifierMembreFixed.ShowAll();
			}
		}


		///////////////////////////////////////////////////////////////////////
		///////////////// Activation lorsque entry nom change /////////////////
		///////////////////////////////////////////////////////////////////////
		void loadClient(object obj, EventArgs args) {
			Entry text = (Entry) obj;
			nomLook = text.Text;
			refreshList();

		}


		///////////////////////////////////////////////////////////////////////
		////////////////// Création de la liste de gauche  ////////////////////
		///////////////////////////////////////////////////////////////////////
		static ListStore CreateModel() {
			ListStore store = new ListStore( typeof(int), typeof(string), typeof(string), typeof(int) );

			int id = 0;

			foreach( Famille familleInfo in familleListe ) {
				string nom = (string)familleInfo.Nom;
				if( nom.Contains(nomLook) ) {
					string listeMembre = "";
					for(int i =0; i < familleInfo.GetTailleListeMembre; i++ ) {
						listeMembre += familleInfo.GetMembre(i).Prenom;

						if( i < familleInfo.GetTailleListeMembre - 1 ) {
							listeMembre += "\n";
						}
					}
					store.AppendValues( familleInfo.Id, familleInfo.Nom, listeMembre, familleInfo.Points);
					id++;
				}
			}
			return store;
		}

		static ListStore CreateModelMember() {
			ListStore store = new ListStore( typeof(int), typeof(string), typeof(string) );

			if(familleChoisi != - 1) {
				try {
					for(int i = 0; i < familleListe[familleChoisi].GetTailleListeMembre; i++) {
						if( familleListe[familleChoisi].GetMembre(i).Genre == 0 )
							store.AppendValues( i, familleListe[familleChoisi].GetMembre(i).Prenom, "homme" );
						else
							store.AppendValues( i, familleListe[familleChoisi].GetMembre(i).Prenom, "femme" );
					}
				} catch ( Exception e ) {
					Console.WriteLine("Error(3) : " + e.Message );
				}
			}

			return store;
		}

		public static void refreshList() {
			store = CreateModel();
			tree.Model = store;
		}
	}
}

