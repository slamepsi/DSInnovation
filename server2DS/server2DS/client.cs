// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Text;
using System.Reflection;
using System.Collections.Generic;

namespace serverDS
{
	public class client
	{
		private TcpClient tcpClient;
		private NetworkStream stream;
		
		public client ( object nouveauClient)
		{
			Console.WriteLine("client connected");
			tcpClient = (TcpClient) nouveauClient;
			stream = tcpClient.GetStream();

			Thread listen = new Thread( new ThreadStart(listenClient));
			listen.Start();
		}
		
		public void listenClient () 
		{
			Thread.Sleep(500);
			List<string> test = methode.SendAllInfo();

			for(int i = 0; i < test.Count; i++) {
				Console.WriteLine(test[i]);
				sendMessage(test[i]);
				Thread.Sleep(200);
			}

			Server.AddClient( this );

			byte[] message = new byte[16384];
			
			while ( MainClass.IsRunning ) 
			{
				int byteRead = 0;
				try 
				{
					byteRead = stream.Read(message, 0, message.Length);
				} catch (Exception e) 
				{
					Console.WriteLine("Error (1) : dÃ©connexion du client. \n-"+e.Message);
					Server.removeClient( this );
					return;
				}
				
				if(byteRead == 0 )
					return;
				
				ASCIIEncoding encoder = new ASCIIEncoding();
				string information = encoder.GetString (message, 0, byteRead);
				//Console.WriteLine( information );
				
				String[] NetString = information.Split(':');

				switch( NetString[0])
				{
				case "addFamily":
					methode.add_family( (string)NetString[1], (string)NetString[2] ); // (string)nom, (string)adresse, (int)points
					break;
				case "addMember":
					methode.add_member( int.Parse(NetString[1]), (string)NetString[2], int.Parse (NetString[3]) );
					break;
				case "delFamily":
					methode.del_family( int.Parse(NetString[0]), (string)NetString[1] ); // (int)id
					break;
				case "delMember":
					methode.del_member( int.Parse(NetString[1]), (string)NetString[2] );
					break;
				case "updFamily":
					methode.upd_family( (string)NetString[1], (string)NetString[2] );
					break;
				case "updMember":
					methode.upd_member( (string)NetString[2], int.Parse (NetString[3]) );
					break;
				case "updPoints":
					methode.upd_point( int.Parse(NetString[3]) );
					break;
				case "error":
					test = methode.SendAllInfo();
					
					for(int i = 0; i < test.Count; i++) {
						Console.WriteLine(test[i]);
						sendMessage(test[i]);
						Thread.Sleep(200);
					}
					break;
				}
			}
		}

		public void sendMessage(string info) {
			ASCIIEncoding encoder = new ASCIIEncoding();
			byte[] buffer = encoder.GetBytes(info);

			try {
				stream.Write (buffer, 0, buffer.Length);
				stream.Flush();
			} catch (Exception e) {
				Console.WriteLine("Error(2) : " + e.Message );
			}
		}

		public static void broadcast ( string info ) {
			for( int i = 0; i < Server.GetCount(); i++ ) {
				Server.GetClient(i).sendMessage( info );
			}
		}
	}
}